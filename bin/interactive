#!/usr/bin/env bash

# helpers ######################################################################

# * any path-like variables should be remember and reset using this machanism
# keeping the original PATH for cleaning environments
export __PATH="${__PATH:-$PATH}"
export __MANPATH="${__MANPATH:-$MANPATH}"
export __INFOPATH="${__INFOPATH:-$INFOPATH}"
export __PYTHONPATH="${__PYTHONPATH:-$PYTHONPATH}"
export __LD_LIBRARY_PATH="${__LD_LIBRARY_PATH:-$LD_LIBRARY_PATH}"
# reset PATH every time a new interactive shell is started
# berfore any paths are added to it
[[ -n "$__PATH" ]] && export PATH="$__PATH"
[[ -n "$__MANPATH" ]] && export MANPATH="$__MANPATH"
[[ -n "$__INFOPATH" ]] && export INFOPATH="$__INFOPATH"
[[ -n "$__PYTHONPATH" ]] && export PYTHONPATH="$__PYTHONPATH"
[[ -n "$__LD_LIBRARY_PATH" ]] && export LD_LIBRARY_PATH="$__LD_LIBRARY_PATH"

printerr () {
    printf "%s\\n" "$@" >&2
}

path_prepend () {
    if [[ -d "$1" ]]; then
        case ":$PATH:" in
            *":$1:"*) :;;
            *) export PATH="${1}${PATH:+:${PATH}}";;
        esac
    fi
}

path_append () {
    if [[ -d "$1" ]]; then
        case ":$PATH:" in
            *":$1:"*) :;;
            *) export PATH="${PATH:+${PATH}:}${1}";;
        esac
    fi
}

# variants of the above with $1 as the prefix only
# modifies PATH, MANPATH, INFOPATH
path_prepend_all () {
    if [[ -d "$1/bin" ]]; then
        case ":$PATH:" in
            *":$1/bin:"*) :;;
            *) export PATH="${1}/bin${PATH:+:${PATH}}";;
        esac
    fi
    if [[ -d "$1/share/man" ]]; then
        case ":$MANPATH:" in
            *":$1/share/man:"*) :;;
            *) export MANPATH="${1}/share/man${MANPATH:+:${MANPATH}}";;
        esac
    fi
    if [[ -d "$1/share/info" ]]; then
        case ":$INFOPATH:" in
            *":$1/share/info:"*) :;;
            *) export INFOPATH="${1}/share/info${INFOPATH:+:${INFOPATH}}";;
        esac
    fi
}

path_append_all () {
    if [[ -d "$1/bin" ]]; then
        case ":$PATH:" in
            *":$1/bin:"*) :;;
            *) export PATH="${PATH:+${PATH}:}${1}/bin";;
        esac
    fi
    if [[ -d "$1/share/man" ]]; then
        case ":$MANPATH:" in
            *":$1/share/man:"*) :;;
            *) export MANPATH="${MANPATH:+${MANPATH}:}${1}/share/man";;
        esac
    fi
    if [[ -d "$1/share/info" ]]; then
        case ":$INFOPATH:" in
            *":$1/share/info:"*) :;;
            *) export INFOPATH="${INFOPATH:+${INFOPATH}:}${1}/share/info";;
        esac
    fi
}

# Powerlevel10k ################################################################

if [[ -n "$ZSH_VERSION" ]]; then

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block, everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

fi

# "module" functions ###########################################################

# these should come in pairs of ml and mu stands for module-load, module-unload
# mu is not needed if it only manipulate PATH

# ! known limitation: this isn't truly a module unload system
# ! it probably still has side effects

ml_brew () {
    # adapted from `brew shellenv`
    export HOMEBREW_CELLAR="$HOMEBREW_PREFIX/Cellar"
    export HOMEBREW_REPOSITORY="$HOMEBREW_PREFIX/Homebrew"

    path_prepend "$HOMEBREW_PREFIX/sbin"
    path_prepend_all "$HOMEBREW_PREFIX"

    # GNU-ize only needed on macOS
    [[ "$__OSTYPE" == darwin && -s "$HOME/.path" ]] && . "$HOME/.path"

    path_prepend_all "$HOMEBREW_PREFIX/opt/ruby"
}

mu_brew () {
    unset HOMEBREW_CELLAR
    unset HOMEBREW_REPOSITORY
    # from "$HOME/.path"
    unset HOMEBREW_CC
    unset HOMEBREW_CXX
}

# macports
ml_port () {
    path_prepend_all /opt/local
    path_prepend /opt/local/libexec/gnubin
}

# conda
ml_conda () {
    # * this source the conda functions but not changing the PATH directly
    # it allows you to put the conda function available without letting it
    # changing your PATH
    local __PATH__="$PATH"
    . "$__CONDA_PREFIX/etc/profile.d/conda.sh"
    export PATH="$__PATH__"
}

mu_conda () {
    # from "$__CONDA_PREFIX/etc/profile.d/conda.sh"
    unset CONDA_EXE
    unset CONDA_PYTHON_EXE
    unset CONDA_SHLVL
    unset _CE_CONDA
    unset _CE_M
}

# sman
ml_s () {
    . "$HOME/.sman/sman.rc"
    export SMAN_APPEND_HISTORY=false
    export SMAN_EXEC_CONFIRM=false
    export SMAN_SNIPPET_DIR="$HOME/git/source/sman-snippets"
}

mu_s () {
    unset SMAN_APPEND_HISTORY
    unset SMAN_EXEC_CONFIRM
    unset SMAN_SNIPPET_DIR
}

ml_exa () {
    alias ls=exa
}

mu_exa () {
    alias ls="noglob ls"
}

# hosts ========================================================================

case "$__HOST" in
    cori)
        ml_host () {
            # common polar
            export PBCOMMON="$COMMON_ROOT/polar"
            path_append_all "$PBCOMMON/local"
            # modules
            module load git
            module load nano
            module load parallel
            module load tmux
            module load tree
        }

        mu_host () {
            unset PBCOMMON

            module unload git
            module unload nano
            module unload parallel
            module unload tmux
            module unload tree
        }

        ml_toast () {
            module use /global/common/software/cmb/cori/default/modulefiles
            module load cmbenv
            source cmbenv
            /usr/bin/cp -f ~/.condarc.backup ~/.condarc
        }

        ml_toast2 () {
            module use /global/common/software/polar/toast/modulefiles
            module load cmbenv
            source cmbenv
            /usr/bin/cp -f ~/.condarc.backup ~/.condarc
        }
        ;;
    comet)
        ml_host () {
            # adapted from from /etc/bashrc
            for i in /etc/profile.d/*.sh; do
                [[ -r "$i" ]] && . "$i"
            done
            path_prepend_all /share/apps/compute/gcc-7.2.0
            path_prepend_all /share/apps/compute/parallel
            path_prepend_all /share/apps/compute/zsh
            path_prepend_all /share/apps/compute/tmux/v2.3
        }
        ;;
    lpc-mini)
        ml_toast () {
            conda activate /scratch/local/toast-gnu/conda

            export LD_LIBRARY_PATH="/scratch/local/toast-gnu/compile/lib:$LD_LIBRARY_PATH"
            export PYTHONPATH="/scratch/local/toast-gnu/compile/lib/python3.7/site-packages:$PYTHONPATH"
            export PATH="/scratch/local/toast-gnu/compile/bin:/scratch/local/toast-gnu/conda/bin:$PATH"
        }
esac

#===============================================================================

ml () {
    path_append_all "$HOME/.local"
    path_append_all "$HOME/go"

    [[ -n "$HOMEBREW_PREFIX" ]] && ml_brew
    [[ "$__OSTYPE" == darwin ]] && ml_port
    [[ -n "$__CONDA_PREFIX" ]] && ml_conda
    [[ -f "$HOME/.sman/sman.rc" ]] && ml_s
    # exa: only alias if exist. hash is incorrect on Cori
    type exa >/dev/null 2>&1 && ml_exa

    case "$__HOST" in
        cori|comet) ml_host;;
    esac
}

mu () {
    [[ -n "$__PATH" ]] && export PATH="$__PATH" || unset PATH
    [[ -n "$__MANPATH" ]] && export MANPATH="$__MANPATH" || unset MANPATH
    [[ -n "$__INFOPATH" ]] && export INFOPATH="$__INFOPATH" || unset INFOPATH
    [[ -n "$__PYTHONPATH" ]] && export PYTHONPATH="$__PYTHONPATH" || unset PYTHONPATH
    [[ -n "$__LD_LIBRARY_PATH" ]] && export LD_LIBRARY_PATH="$__LD_LIBRARY_PATH" || unset LD_LIBRARY_PATH

    mu_brew
    mu_conda
    mu_s
    mu_exa
    case "$__HOST" in
        cori) mu_host;;
    esac
}

# main #########################################################################

ml

# even if this doesn't mask the world readability
# the parent directories should protect it already
umask 022

neofetch 2>/dev/null
